name: Build and Deploy AquilaCMS to EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

#     - name: Set up Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: '18'

#     - name: Install dependencies
#       run: yarn install

#     - name: Build Docker image
#       run: docker build -t aquilacms .

#     - name: Log in to Docker Hub
#       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#     - name: Push Docker image
#       run: |
#         docker tag aquilacms:latest ${{ secrets.DOCKER_USERNAME }}/aquilacms:latest
#         docker push ${{ secrets.DOCKER_USERNAME }}/aquilacms:latest

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Create SSH Directory
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
    - name: Set SSH Key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/aquila-aws-key.pem
        sudo chmod 400 ~/.ssh/aquila-aws-key.pem

    - name: Start SSH Agent
      run: |
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/aquila-aws-key.pem
        ssh-add -l

    - name: Add Bastion Host to known_hosts
      run: ssh-keyscan -H ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts

    - name: Add Database Host to known_hosts
      run: ssh-keyscan -H ${{ secrets.PRIVATE_DB_HOST }} >> ~/.ssh/known_hosts

    - name: Add App Host to known_hosts
      run: ssh-keyscan -H ${{ secrets.PRIVATE_APP_HOST }} >> ~/.ssh/known_hosts

    - name: Debug SSH Configuration
      run: |
        echo "Contents of known_hosts:"
        cat ~/.ssh/known_hosts

    - name: Update MongoDB and Cache
      run: |
        ssh -o ProxyCommand="ssh -W %h:%p ubuntu@${{ secrets.BASTION_HOST }}" ubuntu@${{ secrets.PRIVATE_DB_HOST }} << EOF
          # Commands to update MongoDB or related tasks
          sudo apt-get update
          sudo apt-get install gnupg curl
          curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \
          sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \
          --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org
          sudo systemctl start mongod
          sudo systemctl enable mongod
          sudo systemctl status mongod
          sudo systemctl restart mongodb
          # Add any cache update commands if needed
        EOF

    - name: Deploy Dockerized Application
      run: |
        ssh -o ProxyCommand="ssh -W %h:%p ubuntu@${{ secrets.BASTION_HOST }}" ubuntu@${{ secrets.PRIVATE_APP_HOST }} << EOF
          # Stop the existing Docker container
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

          docker stop myapp || true
          docker rm myapp || true

          # Pull the latest Docker image
          docker pull ${{ secrets.DOCKER_USERNAME }}/aquilacms:latest

          # Run the Docker container
          docker run -d --name myapp -p 3010:3010 ${{ secrets.DOCKER_USERNAME }}/aquilacms:latest
        EOF
